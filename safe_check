import numpy as np
import matplotlib.pyplot as plt

# Constants
r0 = 1.25
A_ba = 144
A_nd = 144
A_sm = 144
A_pb = 208
Z_ba = 56
Z_nd = 60
Z_sm = 62
Z_pb = 82
E_B = 4.52 * 144  # MeV
theta_max = np.radians(93)
theta_min = np.radians(32)

# Angle array (1° to 179° to avoid cot(0))
theta_deg = np.linspace(1, 179, 1000)
theta_rad = np.radians(theta_deg)

# Nuclear radius function
def radius(A):
    return r0 * A**(1/3)

# Calculate radius
R_ba = radius(A_ba)
R_nd = radius(A_nd)
R_sm = radius(A_sm)
R_pb = radius(A_pb)

#  Minimum safe distance (same for all)
d_min = R_ba + R_pb + 5  # fm

# Calculate distance of closest approach
d_min_ba = 0.72 * ((Z_ba * Z_pb) / E_B ) * ((A_ba + A_pb) / A_pb) * (1 + (1 / np.sin(theta_max/2)))
d_min_nd = 0.72 * ((Z_nd * Z_pb) / E_B ) * ((A_nd + A_pb) / A_pb) * (1 + (1 / np.sin(theta_max/2)))
d_min_sm = 0.72 * ((Z_sm * Z_pb) / E_B ) * ((A_sm + A_pb) / A_pb) * (1 + (1 / np.sin(theta_max/2)))

# Print results
print(f"Safe distance = {d_min:.2f} fm")
print(f"Minimum distance Ba = {d_min_ba:.2f} fm")
print(f"Minimum distance Nd = {d_min_nd:.2f} fm")
print(f"Minimum distance Sm = {d_min_sm:.2f} fm")

# dmin function
def dmin_function(theta, Z_p, Z_t, A_p, A_t, E_B):

    d = 0.72 * ((Z_p * Z_t) / E_B ) * ((A_p + A_t) / A_t) * (1 + (1 / np.sin(theta/2)))
    b = (0.5 * d) / np.tan(theta / 2)

    return b, d

b_ba, d_ba = dmin_function(theta_rad, Z_ba, Z_pb, A_ba, A_pb, E_B)
b_nd, d_nd = dmin_function(theta_rad, Z_nd, Z_pb, A_nd, A_pb, E_B)
b_sm, d_sm = dmin_function(theta_rad, Z_sm, Z_pb, A_sm, A_pb, E_B)


# Plotting
plt.figure(figsize=(8, 6))
plt.plot(theta_deg, d_ba, label='$^{144}$Ba on $^{208}$Pb', color='blue')
plt.plot(theta_deg, d_nd, label='$^{144}$Nd on $^{208}$Pb', color='red')
plt.plot(theta_deg, d_sm, label='$^{144}$Sm on $^{208}$Pb', color='green')

mask = (theta_deg >= np.degrees(theta_min)) & (theta_deg <= np.degrees(theta_max))
plt.fill_between(theta_deg, d_sm, d_min, where=(d_sm > d_min) & mask, color='blue', alpha=0.2)
plt.text(35, 25, 'Safe', fontsize=12, color='black')
plt.axvline(x=np.degrees(theta_max), color='k', linestyle='--', label='CD Detector Range')
plt.axvline(x=np.degrees(theta_min), color='k', linestyle='--')
plt.axhline(y=d_min, color='k', linestyle='-', label='d_min = 18.96 fm')
plt.xlabel('Scattering Angle $θ_{COM}$ (degrees)')
plt.ylabel('Distance of Approach $d$ (fm)')
plt.yscale('log')
plt.ylim(10, 1000)
plt.xlim(1, 160)
plt.legend(frameon=0)
plt.savefig('/Users/joshcurry/cernbox/IS708_2025//impact_parameter_curve.png')
